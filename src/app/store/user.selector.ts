import { createSelector } from "@ngrx/store"; 
// Импорт функции `createSelector` из библиотеки NgRx Store. 
// Эта функция используется для создания мемоизированных селекторов, которые извлекают и вычисляют данные из состояния.

import { User } from "../types/user.models"; 
// Импорт интерфейса `User`, который описывает структуру данных пользователя. Это поможет типизировать данные.

interface UserState { 
    users: User[]; 
} 
// Определение интерфейса `UserState`, который описывает часть состояния приложения, 
// отвечающую за пользователей. Поле `users` представляет массив пользователей.

interface AppState { 
    users: UserState; 
} 
// Определение интерфейса `AppState`, который представляет всё состояние приложения.
// Здесь указано, что состояние `AppState` содержит часть `users`, типизированную как `UserState`.

export const selectUsersFeature = (state: AppState) => state.users; 
// Определение функции-селектора `selectUsersFeature`, которая принимает текущее состояние приложения (`AppState`)
// и возвращает часть состояния, относящуюся к пользователям (`UserState`).
// Она извлекает объект `users` из общего состояния.

export const selectUsers = createSelector( 
    selectUsersFeature, 
    // Первый аргумент: `selectUsersFeature` — это функция, которая возвращает часть состояния `UserState`.

    (state: UserState) => state.users 
    // Второй аргумент: проектор-функция, которая принимает состояние пользователей (`UserState`)
    // и возвращает массив пользователей `users`. 
    // Это мемоизированный селектор, который будет переиспользовать результат, если входные данные не изменились.
);
